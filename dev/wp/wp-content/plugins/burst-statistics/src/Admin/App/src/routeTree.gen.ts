/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatisticsImport } from './routes/statistics'
import { Route as SourcesImport } from './routes/sources'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsSettingsIdImport } from './routes/settings.$settingsId'

// Create/Update Routes

const StatisticsRoute = StatisticsImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => rootRoute,
} as any)

const SourcesRoute = SourcesImport.update({
  id: '/sources',
  path: '/sources',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSettingsIdRoute = SettingsSettingsIdImport.update({
  id: '/$settingsId',
  path: '/$settingsId',
  getParentRoute: () => SettingsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/sources': {
      id: '/sources'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof SourcesImport
      parentRoute: typeof rootRoute
    }
    '/statistics': {
      id: '/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsImport
      parentRoute: typeof rootRoute
    }
    '/settings/$settingsId': {
      id: '/settings/$settingsId'
      path: '/$settingsId'
      fullPath: '/settings/$settingsId'
      preLoaderRoute: typeof SettingsSettingsIdImport
      parentRoute: typeof SettingsImport
    }
  }
}

// Create and export the route tree

interface SettingsRouteChildren {
  SettingsSettingsIdRoute: typeof SettingsSettingsIdRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsSettingsIdRoute: SettingsSettingsIdRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/sources': typeof SourcesRoute
  '/statistics': typeof StatisticsRoute
  '/settings/$settingsId': typeof SettingsSettingsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/sources': typeof SourcesRoute
  '/statistics': typeof StatisticsRoute
  '/settings/$settingsId': typeof SettingsSettingsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/sources': typeof SourcesRoute
  '/statistics': typeof StatisticsRoute
  '/settings/$settingsId': typeof SettingsSettingsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/sources'
    | '/statistics'
    | '/settings/$settingsId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/sources' | '/statistics' | '/settings/$settingsId'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/sources'
    | '/statistics'
    | '/settings/$settingsId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  SourcesRoute: typeof SourcesRoute
  StatisticsRoute: typeof StatisticsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRouteWithChildren,
  SourcesRoute: SourcesRoute,
  StatisticsRoute: StatisticsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/settings",
        "/sources",
        "/statistics"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/settings": {
      "filePath": "settings.jsx",
      "children": [
        "/settings/$settingsId"
      ]
    },
    "/sources": {
      "filePath": "sources.jsx"
    },
    "/statistics": {
      "filePath": "statistics.jsx"
    },
    "/settings/$settingsId": {
      "filePath": "settings.$settingsId.jsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
